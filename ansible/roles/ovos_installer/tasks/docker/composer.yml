---
- name: Retrieve groups information
  ansible.builtin.getent:
    database: group
  tags:
    - always

- name: Set _composition_directory fact
  ansible.builtin.set_fact:
    _composition_directory: "{{ _ovos_installer_working_directory }}/{{ _ovos_installer_project_name }}/compose"
  tags:
    - always

- name: Generate .env file for docker-compose
  ansible.builtin.template:
    src: docker/env.j2
    dest: "{{ _composition_directory }}/.env"
    owner: root
    group: root
    mode: "0644"
  tags:
    - always

- name: Remove DISPLAY and WAYLAND_DISPLAY variables if EGLFS is used
  ansible.builtin.lineinfile:
    path: "{{ _composition_directory }}/docker-compose.gui.yml"
    search_string: "DISPLAY"
    state: absent
  when: ovos_installer_profile != 'satellite' and
    ovos_installer_feature_gui | bool and
    ovos_installer_display_server == 'N/A'

- name: Define composition
  vars:
    _os_type: "{{ 'wsl2' if ansible_kernel is search('microsoft') else 'linux' }}"
  ansible.builtin.set_fact:
    _composition_files: "{{ _composition_files | default([]) + [item.file] }}"
  loop:
    - {
        "file": "docker-compose.yml",
        "state": "{{ 'true' if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server' and _os_type == 'linux') else 'false' }}",
      }
    - {
        "file": "docker-compose.windows.yml",
        "state": "{{ 'true' if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server' and _os_type == 'wsl2') else 'false' }}",
      }
    - {
        "file": "docker-compose.raspberrypi.yml",
        "state": "{{ 'true' if (ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server' and ovos_installer_raspberrypi != 'N/A') else 'false' }}",
      }
    - {
        "file": "docker-compose.skills.yml",
        "state": "{{ 'false' if (ansible_memtotal_mb < 1650 and ovos_installer_profile != 'satellite' or not ovos_installer_feature_skills | bool) else 'true' }}",
      }
    - {
        "file": "docker-compose.skills-extra.yml",
        "state": "{{ 'false' if (ansible_memtotal_mb < 1650 and ovos_installer_profile != 'satellite' or not ovos_installer_feature_extra_skills | bool) else 'true' }}",
      }
    - {
        "file": "docker-compose.hivemind.yml",
        "state": "{{ 'true' if ovos_installer_profile == 'listener' else 'false' }}",
      }
    - {
        "file": "docker-compose.gui.yml",
        "state": "{{ 'true' if (ansible_memtotal_mb >= 1650 and ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server' and ovos_installer_feature_gui | bool) else 'false' }}",
      }
    - {
        "file": "docker-compose.raspberrypi.gui.yml",
        "state": "{{ 'true' if (ansible_memtotal_mb >= 1650 and ovos_installer_profile != 'satellite' and ovos_installer_profile != 'server' and 'Raspberry Pi 4' in ovos_installer_raspberrypi and ovos_installer_feature_gui | bool) else 'false' }}",
      }
    - {
        "file": "docker-compose.satellite.yml",
        "state": "{{ 'true' if ovos_installer_profile == 'satellite' else 'false' }}",
      }
    - {
        "file": "docker-compose.server.yml",
        "state": "{{ 'true' if ovos_installer_profile == 'server' else 'false' }}",
      }
  when: item.state | bool

- name: Deploy docker-compose stack
  become: true
  become_user: "{{ ovos_installer_user }}"
  vars:
    _project_name: "{{ 'hivemind' if ovos_installer_profile == 'satellite' else 'ovos' }}"
  community.docker.docker_compose_v2:
    project_src: "{{ _composition_directory }}"
    project_name: "{{ _project_name }}"
    files: "{{ _composition_files }}"
    pull: always
    remove_orphans: "{{ ovos_installer_docker_compose_remove_orphans }}"
    remove_images: "{{ ovos_installer_docker_compose_remove_images }}"
    remove_volumes: "{{ ovos_installer_docker_compose_remove_volumes }}"
  register: _ovos_installer_docker_compose
  until: not _ovos_installer_docker_compose.failed | bool
  retries: 5
  delay: 3
  environment:
    DOCKER_TIMEOUT: "900"

- name: Generate _identity.json
  become: true
  become_user: "{{ ovos_installer_user }}"
  community.docker.docker_container_exec:
    container: hivemind_cli
    command: hivemind-client set-identity --key {{ ovos_installer_satellite_key }} --password {{ ovos_installer_satellite_password }} --host {{ ovos_installer_listener_host }} --port {{ ovos_installer_listener_port | default(5678) }} --siteid {{ ovos_installer_site_id | default("voice-sat-1") }}
  when: ovos_installer_profile == "satellite"

- name: Run ovos-config for auto-configuration of STT and TTS based on language
  become: true
  become_user: "{{ ovos_installer_user }}"
  community.docker.docker_container_exec:
    container: ovos_cli
    command: ovos-config autoconfigure --lang {{ ovos_installer_locale }} --male --online
  when: ovos_installer_profile != "server"

- name: Block uninstall composer
  when: ovos_installer_cleaning | bool
  tags:
    - uninstall
  block:
    - name: Remove docker-compose stack(s)
      become: true
      become_user: "{{ ovos_installer_user }}"
      vars:
        _composition_mapping:
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.yml"}
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.raspberrypi.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.skills.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.skills-extra.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.hivemind.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.gui.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.raspberrypi.gui.yml",
            }
          - {
              "src": "ovos-docker",
              "name": "ovos",
              "file": "docker-compose.windows.yml",
            }
          - {
              "src": "hivemind-docker",
              "name": "hivemind",
              "file": "docker-compose.satellite.yml",
            }
      community.docker.docker_compose_v2:
        project_src: "{{ _composition_directory }}"
        project_name: "{{ item.name }}"
        files: "{{ item.file }}"
        remove_orphans: "{{ ovos_installer_docker_compose_remove_orphans }}"
        remove_images: "{{ ovos_installer_docker_compose_remove_images }}"
        remove_volumes: "{{ ovos_installer_docker_compose_remove_volumes }}"
        timeout: 1
        state: absent
      loop: "{{ _composition_mapping }}"
      environment:
        DOCKER_TIMEOUT: "900"
      register: _composer_deletion
      failed_when: _composer_deletion is not defined # We never want it to fail

    - name: Remove directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ ovos_installer_user_home }}/ovos"
        - "{{ ovos_installer_user_home }}/hivemind"

- name: Delete composer directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ _ovos_installer_working_directory }}/ovos-docker"
    - "{{ _ovos_installer_working_directory }}/hivemind-docker"
  tags:
    - always
