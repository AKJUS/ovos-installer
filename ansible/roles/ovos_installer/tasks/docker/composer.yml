---
- name: Retrieve groups information
  ansible.builtin.getent:
    database: group
  tags:
    - always

- name: Retrieve configured timezone
  ansible.builtin.command:
    cmd: |
      timedatectl show --property=Timezone --value
  register: _ovos_installer_timezone
  changed_when: false

- name: Generate .env file for docker-compose
  ansible.builtin.template:
    src: docker/env.j2
    dest: "{{ _ovos_installer_working_directory }}/{{ _ovos_installer_project_name }}/compose/.env"
    owner: root
    group: root
    mode: '0644'
  tags:
    - always

# Required because docker-compose (not docker compose) doesn't support userns option
- name: Remove YAML x-podman function from composition files
  vars:
    _remove_x_podman_ovos: "{{ 'true' if ovos_installer_profile != 'satellite' else 'false' }}"
    _remove_x_podman_satellite: "{{ 'true' if ovos_installer_profile == 'satellite' else 'false' }}"
  ansible.builtin.lineinfile:
    path: "{{ item.file }}"
    search_string: "<<: *podman"
    state: absent
  loop:
    - {"file": "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.yml", "state": "{{ _remove_x_podman_ovos }}"}
    - {"file": "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.skills.yml", "state": "{{ _remove_x_podman_ovos }}"}
    - {"file": "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.hivemind.yml", "state": "{{ _remove_x_podman_ovos }}"}
    - {"file": "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.gui.yml", "state": "{{ _remove_x_podman_ovos }}"}
    - {"file": "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.windows.yml", "state": "{{ _remove_x_podman_ovos }}"}
    - {"file": "{{ _ovos_installer_working_directory }}/hivemind-docker/compose/docker-compose.satellite.yml", "state": "{{ _remove_x_podman_satellite }}"}
  when: item.state | bool

- name: Remove DISPLAY variable if EGLFS is used
  ansible.builtin.lineinfile:
    path: "{{ _ovos_installer_working_directory }}/ovos-docker/compose/docker-compose.gui.yml"
    search_string: "DISPLAY"
    state: absent
  when: ovos_installer_profile != 'satellite' and
        ovos_installer_feature_gui | bool and
        ovos_installer_display_server == 'N/A'

- name: Define composition
  vars:
    _os_type: "{{ 'wsl2' if ansible_kernel is search('microsoft') else 'linux' }}"
  ansible.builtin.set_fact:
    _composition_files: "{{ _composition_files | default([]) + [item.file] }}"
  loop:
    - {"file": "docker-compose.yml", "state": "{{ 'true' if (ovos_installer_profile != 'satellite' and _os_type == 'linux') else 'false' }}"}
    - {"file": "docker-compose.windows.yml", "state": "{{ 'true' (if ovos_installer_profile != 'satellite' and _os_type == 'wsl2') else 'false' }}"}
    - {"file": "docker-compose.raspberrypi.yml", "state": "{{ 'true' if (ovos_installer_profile != 'satellite' and ovos_installer_raspberrypi != 'N/A') else 'false' }}"}
    - {"file": "docker-compose.skills.yml", "state": "{{ 'false' if (ansible_memtotal_mb < 2048 and ovos_installer_profile != 'satellite' or not ovos_installer_feature_skills | bool) else 'true' }}"}
    - {"file": "docker-compose.hivemind.yml", "state": "{{ 'true' if ovos_installer_profile == 'listener' else 'false' }}"}
    - {"file": "docker-compose.gui.yml", "state": "{{ 'true' if (ansible_memtotal_mb >= 2048 and ovos_installer_profile != 'satellite' and ovos_installer_feature_gui | bool) else 'false' }}"}
    - {"file": "docker-compose.raspberrypi.gui.yml", "state": "{{ 'true' if (ansible_memtotal_mb >= 2048 and ovos_installer_profile != 'satellite' and ovos_installer_raspberrypi != 'N/A' and ovos_installer_feature_gui | bool) else 'false' }}"}
    - {"file": "docker-compose.satellite.yml", "state": "{{ 'true' if ovos_installer_profile == 'satellite' else 'false' }}"}
  when: item.state | bool

- name: Deploy docker-compose stack
  become: true
  become_user: "{{ ovos_installer_user }}"
  vars:
    _project_name: "{{ 'hivemind' if ovos_installer_profile == 'satellite' else 'ovos' }}"
  community.docker.docker_compose:
    project_src: "{{ _ovos_installer_working_directory }}/{{ _ovos_installer_project_name }}/compose"
    project_name: "{{ _project_name }}"
    files: "{{ _composition_files }}"
    pull: true
    remove_orphans: "{{ ovos_installer_docker_compose_remove_orphans }}"
    remove_images: "{{ ovos_installer_docker_compose_remove_images }}"
    remove_volumes: "{{ ovos_installer_docker_compose_remove_volumes }}"
  register: _ovos_installer_docker_compose
  until: not _ovos_installer_docker_compose.failed | bool
  retries: 5
  delay: 3
  environment:
    DOCKER_TIMEOUT: "900"

- name: Block uninstall composer
  when: ovos_installer_cleaning | bool
  tags:
    - uninstall
  block:
    - name: Remove docker-compose stack(s)
      become: true
      become_user: "{{ ovos_installer_user }}"
      vars:
        _composition_mapping:
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.raspberrypi.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.skills.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.hivemind.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.gui.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.raspberrypi.gui.yml"}
          - {"src": "ovos-docker", "name": "ovos", "file": "docker-compose.windows.yml"}
          - {"src": "hivemind-docker", "name": "hivemind", "file": "docker-compose.satellite.yml"}
      community.docker.docker_compose:
        project_src: "{{ _ovos_installer_working_directory }}/{{ item.src }}/compose"
        project_name: "{{ item.name }}"
        files: "{{ item.file }}"
        remove_orphans: "{{ ovos_installer_docker_compose_remove_orphans }}"
        remove_images: "{{ ovos_installer_docker_compose_remove_images }}"
        remove_volumes: "{{ ovos_installer_docker_compose_remove_volumes }}"
        timeout: 1
        state: absent
      loop: "{{ _composition_mapping }}"
      environment:
        DOCKER_TIMEOUT: "900"
      register: _composer_deletion
      failed_when: _composer_deletion is not defined # We never want it to fail even if systemd unit doesn't exist

    - name: Remove directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ ovos_installer_user_home }}/ovos"
        - "{{ ovos_installer_user_home }}/hivemind"

- name: Delete composer directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ _ovos_installer_working_directory }}/ovos-docker"
    - "{{ _ovos_installer_working_directory }}/hivemind-docker"
